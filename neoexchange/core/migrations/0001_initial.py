# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-04-24 23:26
from __future__ import unicode_literals

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telclass', models.CharField(choices=[('1m0', '1-meter'), ('2m0', '2-meter'), ('0m4', '0.4-meter')], default='1m0', max_length=3)),
                ('site', models.CharField(choices=[('ogg', 'Haleakala'), ('coj', 'Siding Spring'), ('lsc', 'Cerro Tololo'), ('elp', 'McDonald'), ('cpt', 'Sutherland'), ('tfn', 'Tenerife'), ('sbg', 'SBIG cameras'), ('sin', 'Sinistro cameras')], max_length=3)),
                ('groupid', models.CharField(blank=True, max_length=55, null=True)),
                ('block_start', models.DateTimeField(blank=True, null=True)),
                ('block_end', models.DateTimeField(blank=True, null=True)),
                ('tracking_number', models.CharField(blank=True, max_length=10, null=True)),
                ('num_exposures', models.IntegerField(blank=True, null=True)),
                ('exp_length', models.FloatField(blank=True, null=True, verbose_name='Exposure length in seconds')),
                ('num_observed', models.IntegerField(blank=True, help_text='No. of scheduler blocks executed', null=True)),
                ('when_observed', models.DateTimeField(blank=True, help_text='Date/time of latest frame', null=True)),
                ('active', models.BooleanField(default=False)),
                ('reported', models.BooleanField(default=False)),
                ('when_reported', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Observation Block',
                'verbose_name_plural': 'Observation Blocks',
                'db_table': 'ingest_block',
            },
        ),
        migrations.CreateModel(
            name='Body',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provisional_name', models.CharField(blank=True, max_length=15, null=True, verbose_name='Provisional MPC designation')),
                ('provisional_packed', models.CharField(blank=True, max_length=7, null=True, verbose_name='MPC name in packed format')),
                ('name', models.CharField(blank=True, max_length=15, null=True, verbose_name='Designation')),
                ('origin', models.CharField(blank=True, choices=[('M', 'Minor Planet Center'), ('N', 'NASA'), ('S', 'Spaceguard'), ('D', 'NEODSYS'), ('G', 'Goldstone'), ('A', 'Arecibo'), ('R', 'Goldstone & Arecibo'), ('L', 'LCOGT'), ('Y', 'Yarkovsky'), ('T', 'Trojan')], default='M', max_length=1, null=True, verbose_name='Where did this target come from?')),
                ('source_type', models.CharField(blank=True, choices=[('N', 'NEO'), ('A', 'Asteroid'), ('C', 'Comet'), ('K', 'KBO'), ('E', 'Centaur'), ('T', 'Trojan'), ('U', 'Candidate'), ('X', 'Did not exist'), ('W', 'Was not interesting'), ('D', 'Discovery, non NEO'), ('J', 'Artificial satellite'), ('H', 'Hyperbolic asteroids')], max_length=1, null=True, verbose_name='Type of object')),
                ('elements_type', models.CharField(blank=True, choices=[('MPC_MINOR_PLANET', 'MPC Minor Planet'), ('MPC_COMET', 'MPC Comet')], max_length=16, null=True, verbose_name='Elements type')),
                ('active', models.BooleanField(default=False, verbose_name='Actively following?')),
                ('fast_moving', models.BooleanField(default=False, verbose_name='Is this object fast?')),
                ('urgency', models.IntegerField(blank=True, help_text='how urgent is this?', null=True)),
                ('epochofel', models.DateTimeField(blank=True, null=True, verbose_name='Epoch of elements')),
                ('orbinc', models.FloatField(blank=True, null=True, verbose_name='Orbital inclination in deg')),
                ('longascnode', models.FloatField(blank=True, null=True, verbose_name='Longitude of Ascending Node (deg)')),
                ('argofperih', models.FloatField(blank=True, null=True, verbose_name='Arg of perihelion (deg)')),
                ('eccentricity', models.FloatField(blank=True, null=True, verbose_name='Eccentricity')),
                ('meandist', models.FloatField(blank=True, help_text='for asteroids', null=True, verbose_name='Mean distance (AU)')),
                ('meananom', models.FloatField(blank=True, help_text='for asteroids', null=True, verbose_name='Mean Anomaly (deg)')),
                ('perihdist', models.FloatField(blank=True, help_text='for comets', null=True, verbose_name='Perihelion distance (AU)')),
                ('epochofperih', models.DateTimeField(blank=True, help_text='for comets', null=True, verbose_name='Epoch of perihelion')),
                ('abs_mag', models.FloatField(blank=True, null=True, verbose_name='H - absolute magnitude')),
                ('slope', models.FloatField(blank=True, null=True, verbose_name='G - slope parameter')),
                ('score', models.IntegerField(blank=True, help_text='NEOCP digest2 score', null=True)),
                ('discovery_date', models.DateTimeField(blank=True, null=True)),
                ('num_obs', models.IntegerField(blank=True, null=True, verbose_name='Number of observations')),
                ('arc_length', models.FloatField(blank=True, null=True, verbose_name='Length of observed arc (days)')),
                ('not_seen', models.FloatField(blank=True, null=True, verbose_name='Time since last observation (days)')),
                ('updated', models.BooleanField(default=False, verbose_name='Has this object been updated?')),
                ('ingest', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Minor Body',
                'verbose_name_plural': 'Minor Bodies',
                'db_table': 'ingest_body',
                'ordering': ['-ingest', '-active'],
            },
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cand_id', models.PositiveIntegerField(verbose_name='Candidate Id')),
                ('score', models.FloatField(verbose_name='Candidate Score')),
                ('avg_midpoint', models.DateTimeField(verbose_name='Average UTC midpoint')),
                ('avg_x', models.FloatField(verbose_name='Average CCD X co-ordinate')),
                ('avg_y', models.FloatField(verbose_name='Average CCD Y co-ordinate')),
                ('avg_ra', models.FloatField(verbose_name='Average Observed RA (degrees)')),
                ('avg_dec', models.FloatField(verbose_name='Average Observed Dec (degrees)')),
                ('avg_mag', models.FloatField(blank=True, null=True, verbose_name='Average Observed Magnitude')),
                ('speed', models.FloatField(verbose_name='Speed (degrees/day)')),
                ('sky_motion_pa', models.FloatField(verbose_name='Position angle of motion on the sky (degrees)')),
                ('detections', models.BinaryField(blank=True, null=True, verbose_name='Detections array')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Block')),
            ],
            options={
                'verbose_name': 'Candidate',
            },
        ),
        migrations.CreateModel(
            name='CatalogSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obs_x', models.FloatField(verbose_name='CCD X co-ordinate')),
                ('obs_y', models.FloatField(verbose_name='CCD Y co-ordinate')),
                ('obs_ra', models.FloatField(verbose_name='Observed RA')),
                ('obs_dec', models.FloatField(verbose_name='Observed Dec')),
                ('obs_mag', models.FloatField(blank=True, null=True, verbose_name='Observed Magnitude')),
                ('err_obs_ra', models.FloatField(blank=True, null=True, verbose_name='Error on Observed RA')),
                ('err_obs_dec', models.FloatField(blank=True, null=True, verbose_name='Error on Observed Dec')),
                ('err_obs_mag', models.FloatField(blank=True, null=True, verbose_name='Error on Observed Magnitude')),
                ('background', models.FloatField(verbose_name='Background')),
                ('major_axis', models.FloatField(verbose_name='Ellipse major axis')),
                ('minor_axis', models.FloatField(verbose_name='Ellipse minor axis')),
                ('position_angle', models.FloatField(verbose_name='Ellipse position angle')),
                ('ellipticity', models.FloatField(verbose_name='Ellipticity')),
                ('aperture_size', models.FloatField(blank=True, null=True, verbose_name='Size of aperture (arcsec)')),
                ('flags', models.IntegerField(default=0, help_text='Bitmask of flags', verbose_name='Source flags')),
                ('flux_max', models.FloatField(blank=True, null=True, verbose_name='Peak flux above background')),
                ('threshold', models.FloatField(blank=True, null=True, verbose_name='Detection threshold above background')),
            ],
            options={
                'verbose_name': 'Catalog Source',
                'verbose_name_plural': 'Catalog Sources',
                'db_table': 'catalog_source',
            },
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sitecode', models.CharField(max_length=4, verbose_name='MPC site code')),
                ('instrument', models.CharField(blank=True, max_length=4, null=True, verbose_name='instrument code')),
                ('filter', models.CharField(default='B', max_length=15, verbose_name='filter class')),
                ('filename', models.CharField(blank=True, max_length=50, null=True, verbose_name='FITS filename')),
                ('exptime', models.FloatField(blank=True, null=True, verbose_name='Exposure time in seconds')),
                ('midpoint', models.DateTimeField(verbose_name='UTC date/time of frame midpoint')),
                ('quality', models.CharField(blank=True, default=' ', help_text='Comma separated list of frame/condition flags', max_length=40, verbose_name='Frame Quality flags')),
                ('zeropoint', models.FloatField(blank=True, null=True, verbose_name='Frame zeropoint (mag.)')),
                ('zeropoint_err', models.FloatField(blank=True, null=True, verbose_name='Error on Frame zeropoint (mag.)')),
                ('fwhm', models.FloatField(blank=True, null=True, verbose_name='Full width at half maximum (FWHM; arcsec)')),
                ('frametype', models.SmallIntegerField(choices=[(0, 'Single frame'), (1, 'Stack of frames'), (2, 'Non-LCOGT data'), (3, 'Satellite data'), (4, 'Spectrum'), (5, 'FITS LDAC catalog'), (6, 'BANZAI LDAC catalog'), (10, 'ORACDR QL frame'), (11, 'BANZAI QL frame'), (90, 'ORACDR reduced frame'), (91, 'BANZAI reduced frame')], default=0, verbose_name='Frame Type')),
                ('extrainfo', models.TextField(blank=True, null=True)),
                ('rms_of_fit', models.FloatField(blank=True, null=True, verbose_name='RMS of astrometric fit (arcsec)')),
                ('nstars_in_fit', models.FloatField(blank=True, null=True, verbose_name='No. of stars used in astrometric fit')),
                ('time_uncertainty', models.FloatField(blank=True, null=True, verbose_name='Time uncertainty (seconds)')),
                ('frameid', models.IntegerField(blank=True, null=True, verbose_name='Archive ID')),
                ('wcs', core.models.WCSField(blank=True, null=True, verbose_name='WCS info')),
                ('astrometric_catalog', models.CharField(default=' ', max_length=40, verbose_name='Astrometric catalog used')),
                ('photometric_catalog', models.CharField(default=' ', max_length=40, verbose_name='Photometric catalog used')),
                ('block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Block')),
            ],
            options={
                'verbose_name': 'Observed Frame',
                'verbose_name_plural': 'Observed Frames',
                'db_table': 'ingest_frame',
            },
        ),
        migrations.CreateModel(
            name='PanoptesReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when_submitted', models.DateTimeField(blank=True, null=True, verbose_name='Date sent to Zooniverse')),
                ('last_check', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=False)),
                ('subject_id', models.IntegerField(blank=True, null=True, verbose_name='Subject ID')),
                ('verifications', models.IntegerField(default=0)),
                ('classifiers', models.TextField(blank=True, help_text='Volunteers usernames who found NEOs', null=True)),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Block')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Candidate')),
            ],
            options={
                'verbose_name': 'Zooniverse Report',
            },
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('pi', models.CharField(default='', help_text='Principal Investigator (PI)', max_length=50, verbose_name='PI')),
                ('tag', models.CharField(default='LCOGT', max_length=10)),
                ('active', models.BooleanField(default=True, verbose_name='Proposal active?')),
            ],
            options={
                'db_table': 'ingest_proposal',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ProposalPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Proposal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Proposal Permission',
            },
        ),
        migrations.CreateModel(
            name='SourceMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obs_ra', models.FloatField(blank=True, null=True, verbose_name='Observed RA')),
                ('obs_dec', models.FloatField(blank=True, null=True, verbose_name='Observed Dec')),
                ('obs_mag', models.FloatField(blank=True, null=True, verbose_name='Observed Magnitude')),
                ('err_obs_ra', models.FloatField(blank=True, null=True, verbose_name='Error on Observed RA')),
                ('err_obs_dec', models.FloatField(blank=True, null=True, verbose_name='Error on Observed Dec')),
                ('err_obs_mag', models.FloatField(blank=True, null=True, verbose_name='Error on Observed Magnitude')),
                ('astrometric_catalog', models.CharField(default=' ', max_length=40, verbose_name='Astrometric catalog used')),
                ('photometric_catalog', models.CharField(default=' ', max_length=40, verbose_name='Photometric catalog used')),
                ('aperture_size', models.FloatField(blank=True, null=True, verbose_name='Size of aperture (arcsec)')),
                ('snr', models.FloatField(blank=True, null=True, verbose_name='Size of aperture (arcsec)')),
                ('flags', models.CharField(blank=True, default=' ', help_text='Comma separated list of frame/condition flags', max_length=40, verbose_name='Frame Quality flags')),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Body')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Frame')),
            ],
            options={
                'verbose_name': 'Source Measurement',
                'verbose_name_plural': 'Source Measurements',
                'db_table': 'source_measurement',
            },
        ),
        migrations.CreateModel(
            name='SpectralInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxonomic_class', models.CharField(blank=True, max_length=6, null=True, verbose_name='Taxonomic Class')),
                ('tax_scheme', models.CharField(blank=True, choices=[('T', 'Tholen'), ('Ba', 'Barucci'), ('Td', 'Tedesco'), ('H', 'Howell'), ('S', 'SMASS'), ('B', 'Bus'), ('3T', 'S3OS2_TH'), ('3B', 'S3OS2_BB'), ('BD', 'Bus-DeMeo')], max_length=2, null=True, verbose_name='Taxonomic Scheme')),
                ('tax_reference', models.CharField(blank=True, choices=[('PDS6', 'Neese, Asteroid Taxonomy V6.0. (2010).'), ('BZ04', 'Binzel, et al. (2004).')], max_length=6, null=True, verbose_name='Reference source for Taxonomic data')),
                ('tax_notes', models.CharField(blank=True, max_length=30, null=True, verbose_name='Notes on Taxonomic Classification')),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Body')),
            ],
            options={
                'verbose_name': 'Spectroscopy Detail',
                'verbose_name_plural': 'Spectroscopy Details',
                'db_table': 'ingest_taxonomy',
            },
        ),
        migrations.CreateModel(
            name='SuperBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cadence', models.BooleanField(default=False)),
                ('rapid_response', models.BooleanField(default=False, verbose_name='Is this a ToO/Rapid Response observation?')),
                ('block_start', models.DateTimeField(blank=True, null=True)),
                ('block_end', models.DateTimeField(blank=True, null=True)),
                ('groupid', models.CharField(blank=True, max_length=55, null=True)),
                ('tracking_number', models.CharField(blank=True, max_length=10, null=True)),
                ('period', models.FloatField(blank=True, null=True, verbose_name='Spacing between cadence observations (hours)')),
                ('jitter', models.FloatField(blank=True, null=True, verbose_name='Acceptable deviation before or after strict period (hours)')),
                ('timeused', models.FloatField(blank=True, null=True, verbose_name='Time used (seconds)')),
                ('active', models.BooleanField(default=False)),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Body')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Proposal')),
            ],
            options={
                'verbose_name': 'SuperBlock',
                'verbose_name_plural': 'SuperBlocks',
                'db_table': 'ingest_superblock',
            },
        ),
        migrations.AddField(
            model_name='catalogsources',
            name='frame',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Frame'),
        ),
        migrations.AddField(
            model_name='block',
            name='body',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Body'),
        ),
        migrations.AddField(
            model_name='block',
            name='proposal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Proposal'),
        ),
        migrations.AddField(
            model_name='block',
            name='superblock',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.SuperBlock'),
        ),
    ]
