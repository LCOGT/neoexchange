"""
NEO exchange: NEO observing portal for Las Cumbres Observatory
Copyright (C) 2016-2019 LCO

image_subs.py -- Code to create weight images for SWarp from the rms images generated by SExtractor.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
"""
import os
import numpy as np
from astropy.io import fits

def create_weight_image(fits_file):

    """ Create a weight image for SWarp from the bad pixel mask (BPM) HDU
    of the original fits file, and the rms image generated by SExtractor. """

    if not os.path.exists(fits_file):
        logger.error("FITS file %s does not exist" % fits_file)
        return
    try:
        hdulist = fits.open(fits_file)
    except IOError as e:
        logger.error("Unable to open FITS image %s (Reason=%s)" % (fits_file, e))
        return

    # SCI HDU
    try:
        scidata = hdulist['SCI'].data
        sciheader = hdulist['SCI'].header
    except KeyError:
        logger.error("SCI HDU not found in FITS file.")
        return

    # BPM HDU
    try:
        maskdata = hdulist['BPM'].data
    except KeyError as e:
        logger.error("BPM HDU not found in FITS file.")
        return

    # RMS image
    rms_file = fits_file.replace(".fits.fz", ".rms.fits")
    if not os.path.exists(rms_file):
        logger.error("RMS file %s does not exist" % rms_file)
        return
    try:
        rmsdata = fits.open(rms_file)[0].data
    except IOError as e:
        logger.error("Unable to open RMS image %s (Reason=%s)" % (rms_file, e))
        return

    # Create boolean array based on mask
    boolean_mask = np.array(maskdata, dtype=bool)

    # Create an array to hold the weight values
    weightdata = np.empty_like(maskdata, dtype='<f4')
    weightdata[~boolean_mask] = 1 / rmsdata[~boolean_mask] ** 2
    weightdata[boolean_mask] = 0.

    # Additional mask based on saturation value
    try:
        max_satur = sciheader['MAXLIN']
    except KeyError:
            max_satur = sciheader['SATURATE']
    finally:
        satur_ind = scidata >= max_satur
        weightdata[satur_ind] = 0.

    # Create new weights FITS file
    del(sciheader['EXTNAME'])
    sciheader['L1FRMTYP'] = ('WEIGHT', 'Type of processed image')
    weight_file = fits_file.replace(".fits.fz", ".weights.fits")
    hdu = fits.PrimaryHDU(weightdata, sciheader)
    weight_hdulist = fits.HDUList(hdu)
    weight_hdulist.writeto(weight_file, overwrite = True, checksum = True)

    return weight_file
