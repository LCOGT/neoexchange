import os
from datetime import datetime, timedelta
import logging

import numpy as np
from astropy.table import Column
import matplotlib
matplotlib.use('Agg')
from matplotlib.figure import Figure
import matplotlib.dates as mdates
from matplotlib.ticker import FormatStrFormatter
from django.core.files.storage import default_storage

from astrometrics.ephem_subs import determine_darkness_times
from photometrics.catalog_subs import sanitize_object_name
from photometrics.lineticks import LineTicks

logger = logging.getLogger(__name__)
plot_dpi = 100

def make_targetname(target_name):
    """Strip bad characters out of the target name so it can be used in plot
    filenames
    """

    target_name = sanitize_object_name(target_name)

    return target_name


def add_watermark(fig, text_size=6, text_color='gray'):
    """Adds a 'Created by NEOexchange' "watermark" to the bottom right of the
    plot referenced by <fig>"""

    fig.text(0.975, 0.05, 'Generated by NEOexchange', fontsize=text_size, color=text_color,
             ha='right', va='bottom', alpha=0.5)

    return

def plot_milkyway(ax, radec= True, mw_color="#c65400", mw_alpha=0.5):
    """Adds a fairly detailed Milky Way outline (which includes the major shape
    and dust lanes) to the passed Matplotlib Axes <ax>. Default [radec=True] is
    to plot RA, Dec quantities; if [radec=False], galactic longitude and latitude
    values are plotted instead.
    Colo(u)r and degree of transparency can be altered; default is a sort of
    orange and 50% alpha.
    Returns the 2 Line2D objects produced"""
    if radec:
        # These values come from XEphem's skyviewmenu.c and are converted by:
        # 1. unpacking the coordinate pairs into lists of galactic long. and lat.,
        # 2. converting those galactic longitude and latitude from the [+180, -180] range to [0..2PI]
        # 3. convert to RA, Dec using slalib.sla_galeq()
        # 4. split the output arrays into 2 parts at the 360/0 degree wrap and re-arrange to be continuous
        mw_xplot_top = [360.000, 357.006, 355.163, 352.744, 350.059, 346.962, 343.377, 340.551, 338.762, 336.998, 334.805, 332.882, 331.221, 329.735, 328.835, 327.412, 326.301, 327.452, 327.902, 327.104, 325.155, 322.887, 323.046, 322.190, 319.931, 317.919, 317.095, 315.606, 314.514, 313.735, 311.302, 309.141, 307.745, 305.244, 304.408, 303.983, 302.682, 302.366, 301.975, 301.351, 299.982, 299.790, 299.227, 297.045, 295.451, 294.341, 292.979, 291.628, 291.619, 292.812, 292.846, 291.365, 289.760, 288.731, 288.547, 290.377, 291.810, 291.734, 290.603, 289.965, 290.279, 291.598, 291.175, 289.725, 288.367, 287.713, 286.135, 283.974, 282.330, 282.061, 283.968, 286.294, 288.492, 288.845, 287.217, 285.319, 284.148, 282.591, 279.823, 276.066, 272.340, 269.378, 267.775, 267.418, 266.268, 263.082, 260.414, 257.559, 254.551, 252.500, 252.044, 249.292, 243.735, 239.573, 233.821, 226.048, 218.620, 212.313, 207.628, 205.786, 203.875, 199.194, 194.433, 189.215, 184.285, 184.189, 187.311, 186.265, 177.791, 171.976, 165.291, 159.816, 155.571, 151.705, 148.035, 146.513, 148.698, 151.298, 150.675, 147.028, 144.449, 140.858, 138.598, 136.883, 135.452, 134.006, 133.193, 133.620, 133.087, 131.120, 129.581, 129.455, 128.778, 127.935, 127.538, 124.729, 120.595, 119.510, 120.072, 120.868, 121.587, 122.271, 121.471, 121.685, 120.661, 119.871, 121.136, 123.496, 124.482, 123.810, 124.042, 124.929, 124.096, 123.970, 123.410, 121.598, 121.475, 120.786, 119.571, 118.167, 117.033, 114.576, 112.639, 112.157, 110.951, 108.994, 107.802, 107.506, 108.421, 107.801, 106.507, 105.444, 105.929, 105.729, 106.660, 107.906, 107.283, 106.002, 104.825, 103.032, 102.131, 100.837, 100.174, 099.363, 098.715, 097.836, 096.084, 094.806, 093.021, 091.473, 090.223, 088.729, 087.870, 087.626, 087.028, 085.608, 083.993, 083.131, 083.580, 086.139, 086.765, 088.277, 089.094, 088.088, 086.404, 085.338, 085.338, 083.941, 082.677, 081.011, 080.656, 078.966, 078.865, 079.709, 079.201, 079.455, 078.323, 076.461, 073.471, 070.616, 067.536, 066.025, 064.638, 063.582, 061.753, 059.274, 058.526, 056.636, 052.576, 048.657, 045.580, 042.981, 042.323, 041.967, 040.153, 038.317, 037.075, 035.379, 033.767, 032.249, 031.491, 030.047, 028.138, 027.847, 025.453, 024.713, 022.750, 018.493, 015.377, 012.984, 009.639, 006.577, 005.908, 004.576, 003.888, 002.341, 000.000]
        mw_yplot_top = [+051.744, +049.583, +049.153, +049.293, +049.527, +050.017, +049.834, +048.874, +048.550, +049.136, +048.808, +047.690, +045.879, +044.959, +044.967, +044.791, +042.670, +041.820, +040.799, +039.238, +038.437, +036.761, +035.497, +034.673, +033.624, +032.246, +031.160, +029.676, +029.319, +027.849, +025.559, +022.377, +020.531, +020.097, +019.079, +017.345, +016.498, +015.061, +013.100, +012.089, +011.395, +010.478, +009.319, +006.916, +004.858, +003.433, +002.362, +001.727, +001.061, +000.104, -000.915, -002.264, -001.665, -001.920, -002.719, -003.538, -004.923, -006.864, -009.594, -011.578, -013.025, -014.058, -015.898, -018.461, -020.332, -022.186, -023.240, -023.733, -024.116, -024.871, -025.668, -026.382, -028.452, -030.931, -033.660, -035.198, -036.778, -038.246, -040.276, -042.207, -043.491, -045.378, -047.803, -050.702, -053.217, -055.418, -057.032, -057.531, -058.686, -060.500, -062.846, -065.542, -067.769, -068.403, -067.942, -067.579, -066.657, -067.137, -069.477, -071.762, -073.500, -074.085, -072.966, -072.140, -071.590, -071.081, -070.893, -070.357, -070.069, -070.756, -071.399, -070.366, -068.640, -066.770, -065.617, -064.688, -064.171, -063.662, -063.205, -063.043, -062.140, -060.076, -058.020, -056.575, -054.763, -053.002, -051.470, -050.076, -049.193, -048.062, -046.220, -044.782, -045.142, -046.197, -047.870, -048.323, -047.496, -046.441, -044.945, -044.719, -045.922, -045.741, -043.517, -040.949, -039.322, -037.362, -037.089, -038.501, -037.861, -035.451, -034.119, -032.893, -031.318, -032.594, -032.788, -029.859, -028.386, -027.234, -027.199, -025.506, -024.951, -022.437, -020.008, -018.548, -017.689, -018.448, -017.350, -016.148, -015.241, -014.089, -013.838, -013.133, -011.208, -009.511, -008.024, -006.931, -004.437, -002.398, -001.204, -000.775, -000.113, -000.439, -001.339, -000.633, +001.504, +003.636, +006.330, +008.936, +010.937, +012.040, +012.386, +013.735, +014.977, +016.568, +015.769, +016.690, +017.490, +018.613, +019.817, +021.650, +022.817, +023.414, +024.315, +025.867, +026.827, +028.359, +028.359, +029.360, +030.317, +032.976, +034.470, +035.575, +036.377, +036.979, +037.551, +038.306, +039.026, +040.454, +041.865, +041.904, +041.026, +040.344, +041.121, +042.448, +044.377, +045.392, +044.921, +046.126, +047.203, +047.869, +047.464, +048.169, +049.282, +051.064, +051.925, +051.547, +052.291, +053.218, +054.401, +054.581, +053.463, +053.709, +053.692, +054.248, +055.369, +056.366, +057.159, +057.137, +057.245, +056.972, +055.626, +054.994, +053.949, +053.854, +054.607, +054.570, +053.394]

        mw_xplot_bot = [000.000, 011.824, 012.549, 010.309, 010.361, 011.474, 014.355, 018.300, 017.700, 015.627, 015.932, 022.141, 027.150, 031.102, 038.510, 048.447, 054.156, 057.260, 056.913, 054.187, 050.799, 046.718, 041.937, 036.386, 031.922, 031.273, 033.675, 038.448, 043.431, 045.907, 046.190, 043.644, 041.207, 041.014, 045.139, 049.173, 051.460, 052.357, 052.091, 053.833, 056.204, 058.456, 060.611, 062.753, 064.810, 065.816, 065.309, 064.874, 065.302, 065.181, 067.489, 069.227, 069.656, 068.842, 069.136, 070.608, 072.312, 075.196, 076.205, 077.698, 080.045, 083.810, 085.239, 088.015, 089.999, 092.411, 094.311, 095.132, 095.549, 095.813, 095.813, 096.120, 094.982, 094.499, 094.939, 095.493, 096.037, 096.124, 097.194, 098.476, 099.791, 101.224, 102.614, 103.395, 103.226, 101.997, 101.915, 102.122, 102.139, 101.818, 101.992, 103.125, 103.702, 104.576, 105.274, 105.346, 104.815, 103.966, 103.710, 103.776, 104.279, 105.397, 106.270, 106.798, 106.499, 105.567, 104.324, 104.321, 104.821, 106.371, 106.868, 107.445, 107.795, 108.556, 108.822, 108.097, 108.318, 109.080, 109.891, 110.662, 111.711, 112.383, 112.719, 113.110, 112.837, 112.210, 112.568, 113.283, 114.397, 115.066, 115.293, 115.532, 116.232, 116.468, 116.516, 115.999, 115.446, 115.365, 116.000, 117.226, 118.955, 120.812, 122.596, 124.222, 126.263, 127.768, 129.062, 129.250, 129.133, 129.771, 131.412, 133.094, 134.401, 135.210, 135.327, 134.925, 135.214, 136.094, 136.901, 137.557, 136.605, 136.591, 137.520, 139.425, 139.826, 137.927, 137.163, 137.214, 138.910, 141.350, 142.104, 142.166, 143.288, 144.744, 145.167, 146.717, 148.192, 148.726, 149.251, 151.480, 154.255, 155.417, 156.701, 159.985, 161.329, 161.224, 160.897, 161.771, 164.764, 167.425, 170.089, 172.517, 173.684, 172.456, 172.210, 171.529, 171.416, 172.891, 175.446, 178.667, 181.744, 184.819, 185.343, 183.456, 183.397, 184.437, 187.758, 191.564, 192.652, 192.169, 188.362, 186.093, 184.714, 185.335, 189.184, 194.663, 200.014, 204.748, 209.608, 212.826, 213.700, 215.552, 216.615, 217.074, 217.419, 219.749, 221.367, 221.453, 219.638, 218.893, 219.559, 221.290, 223.423, 224.807, 227.389, 231.307, 233.539, 232.783, 230.784, 229.587, 230.210, 230.853, 230.546, 231.689, 234.403, 236.148, 237.279, 238.567, 240.178, 242.009, 243.040, 242.545, 242.106, 240.660, 240.407, 239.585, 240.220, 239.336, 239.836, 240.773, 240.470, 238.786, 237.088, 234.583, 229.980, 226.675, 222.267, 219.689, 219.247, 221.149, 222.893, 226.388, 229.909, 233.357, 236.017, 238.071, 238.983, 241.831, 243.595, 242.907, 245.517, 246.325, 246.901, 248.900, 251.051, 250.940, 250.140, 249.463, 248.251, 248.144, 249.059, 250.191, 251.291, 252.139, 251.666, 251.122, 251.096, 250.976, 251.221, 252.376, 252.503, 253.169, 253.825, 253.771, 253.922, 254.893, 255.949, 257.339, 259.460, 260.025, 261.987, 262.683, 262.089, 262.094, 262.832, 264.398, 266.324, 268.155, 269.819, 270.625, 270.165, 270.193, 270.943, 272.330, 272.306, 272.240, 272.835, 273.589, 275.014, 276.092, 277.587, 278.147, 278.417, 278.767, 279.449, 279.739, 279.441, 278.853, 278.545, 279.018, 279.077, 278.870, 279.655, 281.013, 281.922, 282.954, 284.486, 285.132, 285.778, 286.829, 288.214, 288.466, 288.892, 289.761, 290.655, 291.571, 292.384, 293.340, 293.085, 292.828, 293.950, 295.281, 296.234, 297.161, 297.782, 299.445, 301.008, 302.856, 302.719, 302.542, 303.612, 303.415, 302.953, 303.476, 304.439, 305.511, 306.560, 307.853, 309.991, 311.485, 312.857, 313.328, 313.138, 312.624, 311.084, 310.581, 309.119, 306.338, 305.484, 305.233, 306.452, 306.557, 306.779, 306.310, 305.862, 303.167, 301.859, 301.671, 300.267, 299.733, 299.543, 298.395, 297.066, 295.998, 294.903, 294.012, 293.766, 292.555, 291.337, 290.617, 288.936, 287.855, 287.368, 287.993, 288.134, 287.412, 286.548, 285.733, 285.927, 286.358, 286.827, 287.565, 288.586, 289.130, 288.501, 287.343, 286.559, 286.230, 286.677, 286.388, 285.149, 284.319, 282.866, 281.869, 281.324, 281.407, 281.400, 280.409, 278.396, 276.874, 274.100, 271.820, 270.120, 269.366, 268.220, 268.352, 269.506, 271.065, 272.670, 274.315, 275.740, 276.265, 277.003, 278.397, 280.216, 281.713, 282.438, 282.450, 282.537, 283.203, 284.266, 284.092, 283.960, 284.913, 285.604, 285.086, 285.790, 287.479, 288.681, 289.825, 290.672, 290.040, 289.648, 288.811, 289.227, 291.132, 292.165, 293.704, 294.017, 294.334, 295.908, 295.853, 295.182, 296.744, 297.835, 298.554, 298.264, 299.240, 301.514, 302.704, 303.363, 306.158, 307.807, 309.852, 311.097, 313.890, 315.361, 316.272, 317.875, 318.223, 319.173, 318.930, 319.450, 320.235, 321.785, 321.450, 319.738, 318.600, 318.943, 319.830, 322.261, 322.946, 322.333, 320.171, 320.400, 322.512, 326.353, 328.871, 329.426, 330.041, 332.309, 333.916, 334.986, 338.582, 340.616, 339.868, 336.463, 333.681, 332.789, 333.076, 333.501, 334.949, 338.125, 343.269, 347.507, 353.465, 359.782]
        mw_yplot_bot = [+065.262, +065.368, +064.871, +063.649, +063.050, +062.865, +063.464, +064.172, +064.694, +065.047, +065.641, +066.000, +066.030, +066.237, +065.265, +064.339, +062.262, +061.391, +059.737, +059.404, +060.097, +060.629, +061.838, +062.943, +063.211, +062.569, +061.799, +061.050, +060.366, +059.709, +058.942, +057.279, +056.373, +055.431, +052.075, +049.541, +048.567, +049.254, +050.586, +051.281, +050.286, +048.602, +047.372, +046.314, +045.073, +045.639, +047.124, +048.961, +049.670, +051.720, +052.269, +050.954, +049.453, +048.701, +046.851, +044.951, +044.148, +044.783, +045.332, +046.109, +046.767, +046.091, +045.423, +042.005, +040.570, +040.095, +038.302, +036.318, +034.065, +033.402, +033.402, +031.543, +030.157, +028.369, +026.550, +026.248, +026.612, +028.215, +029.242, +029.461, +028.919, +029.073, +029.303, +028.754, +027.619, +027.120, +026.329, +025.223, +024.252, +023.239, +022.441, +021.631, +021.667, +020.638, +020.185, +019.567, +019.222, +019.278, +018.395, +016.888, +016.353, +016.431, +016.068, +015.002, +013.988, +013.108, +012.401, +011.957, +011.645, +011.731, +011.418, +010.265, +009.112, +008.492, +007.961, +007.161, +006.274, +005.878, +006.502, +007.433, +008.492, +008.273, +006.692, +005.464, +004.669, +003.691, +002.768, +002.470, +003.149, +002.722, +001.628, -000.126, -002.088, -004.419, -007.207, -008.963, -009.834, -011.130, -012.036, -012.728, -013.243, -014.129, -015.040, -016.031, -017.570, -019.682, -021.586, -023.031, -024.079, -024.874, -025.360, -026.172, -026.991, -028.175, -030.009, -032.235, -034.369, -037.168, -039.673, -041.107, -042.702, -044.329, -045.489, -046.157, -046.866, -047.691, -048.168, -049.090, -050.253, -050.539, -049.893, -048.689, -047.745, -047.554, -046.475, -045.685, -045.372, -044.905, -043.798, -043.149, -043.365, -044.051, -045.355, -046.717, -048.130, -048.887, -049.908, -050.545, -050.262, -049.058, -048.360, -048.190, -048.651, -049.547, -050.021, -050.083, -050.588, -050.902, -050.660, -050.151, -049.738, -049.639, -050.084, -050.931, -051.835, -052.229, -051.544, -051.063, -051.372, -052.069, -053.176, -053.860, -054.772, -055.118, -054.911, -054.157, -052.929, -052.190, -051.605, -051.744, -053.042, -053.499, -052.938, -051.754, -050.698, -050.394, -049.584, -048.559, -047.579, -045.946, -045.081, -045.617, -047.455, -048.776, -048.381, -046.465, -043.895, -043.304, -043.097, -042.121, -040.013, -038.342, -036.808, -036.284, -038.545, -039.645, -039.323, -038.085, -036.289, -035.874, -036.600, -039.327, -041.285, -043.203, -045.099, -046.259, -048.132, -049.292, -050.594, -051.274, -051.970, -052.455, -053.415, -054.787, -055.736, -056.152, -055.758, -056.206, -057.402, -059.146, -059.383, -058.310, -057.538, -057.255, -057.187, -056.037, -055.092, -053.647, -051.423, -049.500, -047.266, -045.848, -044.711, -043.321, -042.448, -041.320, -040.794, -039.269, -037.338, -035.651, -034.067, -033.445, -033.446, -032.749, -032.290, -031.906, -030.217, -027.835, -026.622, -025.326, -023.558, -022.434, -021.797, -021.030, -020.169, -018.917, -018.201, -017.700, -016.475, -016.012, -015.474, -014.966, -014.376, -013.801, -013.783, -014.366, -014.560, -014.102, -014.910, -016.382, -017.969, -019.134, -019.306, -017.978, -016.366, -014.619, -013.568, -013.058, -013.011, -012.098, -010.384, -009.543, -009.682, -010.537, -010.546, -009.118, -007.728, -007.765, -007.268, -005.710, -004.727, -003.383, -001.426, +000.124, +001.680, +001.938, +002.952, +004.644, +006.112, +007.261, +009.028, +010.365, +011.162, +011.277, +012.284, +013.734, +014.558, +016.446, +017.038, +017.629, +018.525, +019.537, +021.099, +021.985, +023.156, +023.754, +024.163, +026.411, +027.323, +028.735, +030.154, +031.346, +032.204, +032.871, +033.535, +035.353, +037.080, +037.819, +038.558, +039.553, +040.373, +041.897, +042.665, +043.624, +044.643, +045.811, +046.461, +046.373, +045.693, +044.727, +043.878, +042.601, +041.625, +039.916, +038.205, +034.840, +032.803, +030.886, +029.523, +027.815, +026.393, +025.266, +025.397, +026.532, +026.630, +025.818, +024.798, +024.037, +024.295, +024.980, +024.427, +023.591, +022.705, +022.076, +021.674, +021.458, +021.863, +021.464, +020.930, +020.173, +018.610, +017.130, +016.623, +015.898, +014.524, +014.319, +014.373, +013.751, +012.629, +011.426, +010.590, +008.989, +007.928, +006.863, +005.572, +004.410, +003.517, +002.677, +002.695, +002.576, +001.768, +001.056, +000.392, +000.676, +002.372, +003.502, +004.439, +004.854, +005.363, +006.850, +008.126, +009.408, +011.353, +012.334, +013.008, +014.612, +016.036, +018.343, +020.823, +022.820, +024.867, +025.704, +026.628, +027.967, +029.961, +031.140, +031.726, +031.263, +031.090, +032.372, +034.670, +037.013, +037.055, +037.049, +037.977, +039.217, +039.919, +042.417, +043.956, +045.933, +047.580, +048.373, +048.822, +049.059, +049.118, +049.756, +050.867, +051.760, +052.768, +053.944, +055.898, +056.651, +056.387, +054.076, +052.254, +051.366, +049.239, +048.707, +048.822, +048.192, +048.417, +049.546, +051.036, +052.806, +053.716, +054.639, +054.784, +055.550, +056.331, +056.549, +056.466, +057.232, +058.160, +059.301, +061.555, +062.810, +063.705, +064.871, +066.967, +068.423, +068.796, +067.261, +066.819, +066.991, +065.957, +064.872, +064.593, +063.193, +061.690, +060.446, +059.257, +058.315, +058.871, +061.052, +062.180, +063.479, +064.808]
    else:
        mw_xplot_top = [0.0, 0.9, 2.5, 3.7, 4.9, 7.1, 7.8, 9.3, 10.1, 10.3, 10.8, 11.2, 11.5, 12.3, 13.6, 13.7, 12.8, 11.2, 10.2, 10.4, 12.2, 13.6, 15.1, 16.3, 17.1, 17.8, 19.1, 21.3, 22.3, 22.3, 21.7, 22.0, 23.4, 24.5, 24.2, 24.5, 26.1, 27.0, 28.1, 30.2, 32.2, 34.0, 34.7, 36.3, 38.1, 39.7, 41.2, 43.4, 44.7, 45.6, 46.1, 47.4, 49.1, 50.2, 52.3, 52.7, 53.1, 54.4, 55.9, 57.7, 58.9, 60.2, 61.5, 62.6, 65.4, 66.1, 67.2, 68.9, 69.8, 70.3, 71.1, 72.1, 74.1, 76.0, 77.2, 78.8, 80.3, 81.6, 83.0, 83.5, 84.0, 84.1, 84.8, 84.7, 83.5, 82.6, 81.7, 81.5, 80.5, 79.8, 78.2, 76.6, 72.6, 70.3, 68.6, 66.8, 65.1, 63.8, 62.3, 61.8, 62.3, 61.9, 60.8, 59.8, 58.6, 58.3, 58.6, 57.4, 56.2, 55.2, 54.9, 54.6, 54.1, 54.1, 53.4, 53.0, 52.5, 51.3, 50.3, 50.3, 49.9, 48.4, 47.7, 47.4, 46.7, 45.9, 44.7, 43.4, 41.6, 40.0, 38.6, 37.2, 36.2, 35.4, 34.2, 33.3, 32.5, 30.5, 28.8, 27.4, 27.3, 28.3, 29.4, 30.8, 31.9, 33.1, 35.2, 37.0, 38.4, 40.5, 42.0, 43.4, 45.5, 47.1, 49.2, 51.5, 53.6, 55.9, 56.6, 57.4, 59.0, 61.1, 62.0, 62.8, 63.0, 63.3, 64.9, 67.3, 69.2, 69.1, 68.8, 69.8, 71.6, 72.6, 75.4, 76.9, 78.8, 80.8, 81.5, 81.7, 82.4, 82.8, 83.6, 84.5, 85.6, 87.2, 88.6, 90.5, 92.0, 92.3, 91.1, 90.1, 90.5, 89.5, 89.5, 90.3, 90.0, 90.6, 91.3, 92.6, 94.2, 95.5, 96.0, 95.4, 95.5, 96.2, 96.7, 97.6, 98.4, 98.8, 98.8, 100.5, 102.1, 104.0, 105.6, 107.1, 108.2, 109.1, 108.7, 108.8, 110.1, 110.3, 109.5, 108.1, 106.3, 105.1, 104.5, 104.0, 104.1, 105.8, 109.1, 111.4, 114.4, 117.4, 120.5, 122.5, 122.8, 121.8, 121.8, 122.3, 123.6, 125.3, 125.0, 124.1, 124.2, 126.7, 128.7, 130.2, 133.4, 137.6, 140.9, 142.6, 143.5, 142.6, 140.8, 138.8, 136.2, 133.4, 131.4, 131.3, 132.6, 135.0, 137.5, 138.9, 139.4, 139.0, 138.2, 138.5, 142.2, 145.7, 147.5, 147.6, 146.7, 147.2, 149.0, 151.2, 153.1, 154.9, 156.8, 156.9, 155.6, 154.1, 153.8, 152.3, 152.9, 154.6, 155.9, 156.1, 157.6, 159.7, 161.1, 161.9, 161.9, 161.9, 162.3, 164.3, 165.4, 169.4, 171.4, 172.7, 175.0, 177.1, 179.3, 180.0, 180.0, 181.8, 182.6, 184.0, 185.8, 186.3, 186.2, 184.8, 184.3, 184.6, 185.6, 186.0, 186.3, 187.1, 188.1, 188.1, 188.8, 189.9, 190.8, 191.6, 192.4, 193.6, 193.8, 195.1, 195.8, 196.4, 196.5, 196.1, 196.8, 198.2, 198.9, 199.3, 200.0, 201.2, 202.0, 202.4, 202.5, 202.9, 203.4, 204.0, 204.5, 205.8, 207.0, 207.9, 208.5, 208.9, 209.8, 210.5, 210.3, 209.8, 209.3, 209.8, 211.4, 212.7, 213.3, 213.9, 214.9, 215.5, 215.4, 216.1, 217.2, 218.9, 221.0, 223.2, 225.7, 227.0, 227.5, 228.6, 229.7, 230.9, 232.2, 233.9, 235.6, 237.3, 239.7, 242.3, 244.6, 245.9, 246.7, 247.7, 249.0, 250.6, 252.0, 253.4, 254.9, 256.4, 258.2, 260.8, 263.1, 264.5, 265.2, 266.4, 267.7, 269.1, 269.8, 269.5, 269.5, 270.2, 271.8, 273.1, 273.0, 272.2, 272.1, 272.7, 272.2, 272.5, 273.1, 273.1, 272.7, 273.6, 275.4, 276.5, 278.0, 280.7, 282.2, 282.5, 282.8, 283.6, 285.2, 286.3, 287.7, 289.2, 290.1, 289.6, 289.6, 289.2, 289.3, 290.3, 291.8, 293.7, 295.6, 297.6, 298.0, 296.9, 297.0, 297.7, 299.7, 302.1, 302.8, 302.5, 300.2, 298.9, 298.2, 298.6, 300.8, 304.0, 307.3, 310.3, 313.4, 315.3, 315.4, 316.3, 317.1, 317.8, 318.4, 319.9, 321.2, 321.7, 321.0, 321.2, 322.0, 322.9, 323.4, 323.6, 325.3, 328.6, 331.4, 331.3, 330.2, 330.0, 331.6, 333.0, 333.7, 334.8, 335.2, 335.6, 336.5, 338.1, 340.3, 341.7, 341.8, 339.6, 338.0, 335.9, 334.5, 333.3, 332.4, 331.2, 330.6, 330.6, 330.0, 328.9, 327.5, 325.5, 322.8, 321.0, 319.0, 317.5, 316.8, 317.0, 317.7, 319.8, 321.8, 323.5, 324.7, 326.3, 327.3, 329.5, 331.8, 332.8, 335.6, 337.0, 338.1, 340.1, 341.8, 342.6, 342.6, 343.4, 344.2, 345.4, 347.1, 348.2, 348.8, 349.8, 349.9, 349.9, 351.2, 353.0, 354.1, 355.8, 357.3, 358.6, 360.0]
        mw_yplot_top = [+13.9, +14.3, +14.3, +13.9, +13.1, +12.1, +11.9, +10.6, +10.3, +11.1, +11.4, +10.8, +9.2, +7.5, +6.2, +4.4, +3.0, +2.6, +2.0, +1.3, +0.8, +1.6, +2.5, +2.5, +2.1, +0.9, +0.4, -0.1, -0.2, -0.5, -1.2, -1.8, -1.4, -0.5, +0.0, +0.5, +0.8, +1.2, +2.0, +2.2, +1.7, +1.6, +0.8, -0.1, +0.1, +0.2, -0.2, -0.6, -0.2, -0.2, -0.9, -1.2, -1.3, -1.6, -1.5, -1.0, -0.5, -1.0, -1.6, -1.6, -1.9, -1.8, -2.8, -3.8, -4.0, -3.4, -2.5, -2.5, -1.7, -0.9, -0.9, -1.2, -0.9, -0.6, -1.0, -1.9, -2.2, -2.5, -1.8, -1.2, -0.3, +1.2, +2.2, +3.4, +4.9, +5.0, +4.6, +3.4, +2.6, +1.9, +1.2, +0.5, +0.4, +0.2, -0.7, -0.4, -0.9, -1.5, -1.2, -0.1, +1.3, +2.2, +2.5, +2.2, +2.8, +3.9, +4.8, +5.9, +6.4, +6.4, +5.6, +5.3, +5.8, +6.7, +7.2, +6.8, +6.1, +5.0, +3.7, +2.6, +1.8, +1.7, +2.6, +3.3, +3.3, +2.4, +2.1, +2.8, +2.8, +3.6, +4.0, +3.9, +3.3, +2.9, +3.4, +5.2, +6.5, +8.6, +10.3, +11.5, +12.3, +14.1, +14.5, +13.9, +12.7, +11.5, +10.7, +10.0, +10.1, +10.3, +9.5, +8.2, +7.6, +7.6, +8.6, +9.6, +9.9, +9.9, +10.4, +10.9, +10.7, +11.0, +11.9, +11.6, +10.1, +9.1, +8.8, +9.2, +10.7, +11.0, +11.6, +11.7, +10.9, +10.5, +10.6, +11.1, +11.8, +11.6, +12.0, +12.6, +11.8, +11.2, +11.1, +11.8, +11.7, +11.0, +11.0, +11.7, +10.8, +9.9, +7.6, +5.9, +4.0, +1.9, +1.1, +0.4, -0.2, -0.5, +0.4, +1.2, +2.1, +2.1, +2.9, +3.7, +4.7, +5.1, +4.9, +3.9, +4.2, +5.1, +6.7, +8.2, +8.4, +7.9, +8.1, +9.6, +10.6, +10.4, +8.8, +8.2, +7.6, +6.3, +5.5, +6.0, +5.5, +4.5, +3.4, +2.3, +1.1, +0.7, +1.4, +1.6, +1.9, +2.5, +2.5, +2.5, +2.0, +0.8, +0.2, +0.0, +0.6, +1.4, +1.9, +2.2, +2.8, +3.4, +3.8, +4.4, +4.5, +5.6, +5.3, +5.5, +4.1, +3.0, +2.6, +2.0, +2.0, +2.0, +1.6, +0.9, +0.5, +0.6, +1.0, +1.0, +0.4, -1.7, -3.1, -4.0, -5.9, -6.8, -6.8, -5.9, -4.9, -3.7, -3.6, -4.0, -4.0, -3.8, -3.7, -2.8, -2.0, -0.9, -0.2, +1.2, +2.6, +2.5, +1.7, +0.8, -0.3, -0.8, -0.4, +1.6, +2.5, +3.8, +5.5, +7.3, +7.8, +7.8, +8.4, +9.8, +10.3, +10.0, +9.3, +9.2, +9.2, +8.6, +7.1, +5.9, +5.4, +5.7, +6.3, +7.1, +8.4, +9.5, +10.3, +11.5, +12.7, +13.1, +12.5, +11.3, +10.9, +10.6, +10.2, +9.5, +9.3, +9.9, +10.4, +10.7, +11.1, +10.9, +10.3, +9.6, +9.0, +8.4, +8.6, +9.6, +10.2, +10.2, +9.5, +8.3, +6.9, +6.7, +7.0, +8.4, +8.7, +8.7, +8.5, +8.9, +8.9, +7.9, +7.7, +8.2, +9.2, +10.3, +11.7, +12.2, +11.8, +11.6, +11.0, +10.0, +9.9, +10.4, +11.7, +12.1, +11.8, +11.2, +10.9, +10.0, +8.7, +7.4, +6.5, +5.8, +5.9, +6.6, +7.8, +8.9, +9.9, +10.7, +11.5, +11.5, +11.4, +10.7, +10.0, +10.0, +10.9, +11.6, +12.0, +11.8, +10.7, +9.0, +7.8, +6.5, +5.3, +4.7, +3.1, +2.0, +1.7, +2.2, +1.9, +0.4, -0.3, -0.9, -0.9, +0.0, +0.8, +1.7, +2.9, +3.7, +4.7, +6.0, +6.9, +7.5, +8.6, +10.1, +11.1, +11.0, +10.4, +10.4, +9.6, +8.9, +7.9, +7.6, +8.7, +10.5, +11.8, +12.5, +12.3, +11.2, +10.7, +10.5, +10.0, +10.0, +10.7, +11.7, +12.5, +12.9, +12.5, +11.5, +10.6, +10.3, +11.2, +11.8, +11.5, +10.8, +9.6, +8.8, +7.8, +7.5, +7.9, +8.7, +9.7, +10.0, +9.9, +9.2, +7.8, +7.0, +7.3, +8.3, +9.2, +8.9, +9.2, +10.1, +11.5, +13.2, +13.8, +12.8, +10.5, +8.9, +8.4, +8.6, +9.8, +10.6, +11.6, +12.9, +14.4, +15.5, +16.9, +16.8, +13.7, +12.0, +11.7, +12.0, +12.5, +11.8, +10.7, +9.0, +7.8, +7.1, +5.8, +5.3, +3.6, +3.1, +1.9, +1.0, +0.6, +0.9, +0.8, +0.6, +1.3, +1.9, +3.4, +3.6, +2.6, +0.6, +0.0, +0.1, -0.2, -1.0, -1.8, -1.6, -1.2, -1.2, -0.3, +1.4, +1.8, +2.4, +2.9, +2.8, +2.2, +3.0, +3.8, +5.2, +7.2, +8.4, +8.9, +8.6, +7.9, +7.8, +8.4, +9.0, +10.1, +11.7, +12.3, +12.3, +13.3, +13.5, +13.4]

        mw_xplot_bot = [359.7, 357.8, 355.0, 352.0, 349.6, 346.9, 344.2, 341.5, 338.9, 336.0, 333.8, 332.5, 330.6, 328.5, 326.5, 323.6, 320.4, 318.8, 317.4, 315.1, 312.9, 310.4, 308.1, 307.0, 306.1, 304.7, 303.4, 301.8, 300.2, 300.1, 301.1, 300.7, 297.8, 296.1, 294.3, 292.2, 290.0, 287.7, 285.8, 284.7, 285.1, 285.7, 285.2, 283.8, 282.3, 279.6, 277.3, 275.6, 273.7, 271.8, 270.3, 269.4, 268.5, 266.8, 264.7, 263.5, 263.5, 264.0, 265.2, 264.5, 262.3, 261.0, 259.9, 260.0, 261.3, 261.4, 259.2, 257.1, 255.3, 253.3, 253.6, 255.8, 255.7, 253.4, 252.4, 251.8, 250.1, 251.1, 251.0, 247.7, 246.4, 245.1, 244.5, 242.4, 241.4, 238.1, 235.1, 233.6, 232.3, 232.1, 230.6, 229.4, 229.0, 227.7, 226.9, 225.8, 224.3, 222.7, 221.8, 221.4, 218.9, 216.5, 214.9, 213.7, 212.7, 212.4, 212.9, 211.9, 209.7, 207.4, 204.2, 201.3, 198.7, 197.0, 196.1, 194.2, 192.7, 191.2, 191.6, 190.1, 188.6, 187.2, 186.4, 186.1, 185.4, 185.6, 185.2, 183.4, 181.8, 180.0, 180.0, 178.5, 177.1, 174.1, 172.7, 171.0, 170.3, 170.2, 169.5, 169.0, 167.9, 165.9, 163.4, 162.0, 161.1, 160.8, 159.5, 158.0, 155.7, 153.7, 153.6, 151.8, 148.9, 146.3, 144.7, 142.8, 141.9, 140.9, 139.5, 138.6, 137.6, 136.3, 135.0, 134.1, 134.0, 133.1, 132.0, 131.7, 130.1, 129.5, 128.3, 126.0, 124.3, 123.0, 121.1, 119.3, 118.8, 118.0, 117.7, 116.8, 115.7, 114.3, 112.5, 111.2, 109.7, 108.1, 106.4, 104.2, 102.1, 100.9, 100.2, 98.8, 97.1, 95.1, 93.7, 93.2, 92.3, 90.3, 90.4, 90.0, 88.5, 86.8, 84.3, 83.5, 82.4, 80.3, 78.1, 76.8, 74.8, 73.9, 72.3, 69.1, 65.3, 63.0, 61.3, 60.0, 58.3, 56.9, 55.5, 53.6, 52.4, 51.1, 50.2, 48.9, 45.7, 43.1, 41.3, 39.7, 38.5, 37.9, 37.6, 36.7, 34.8, 34.6, 33.9, 33.1, 33.2, 32.6, 30.8, 27.8, 25.7, 24.5, 24.1, 22.2, 19.2, 16.9, 14.9, 13.3, 12.0, 11.0, 10.2, 10.2, 10.4, 9.2, 6.9, 3.7, 1.600]
        mw_yplot_bot = [-16.8, -16.2, -15.0, -13.2, -11.3, -10.3, -10.5, -11.7, -12.3, -11.8, -11.4, -10.4, -9.8, -10.1, -11.4, -12.2, -12.1, -11.5, -9.8, -7.9, -5.8, -5.4, -7.2, -9.3, -10.9, -11.3, -10.1, -9.3, -8.9, -8.4, -8.1, -7.6, -7.8, -9.0, -10.4, -10.3, -9.6, -8.9, -8.9, -8.6, -7.6, -6.5, -6.3, -7.2, -7.3, -7.0, -6.4, -6.1, -5.5, -5.0, -4.4, -3.3, -3.0, -3.3, -3.0, -2.2, -2.8, -3.9, -5.1, -6.9, -8.8, -8.9, -7.8, -7.2, -7.4, -6.9, -6.2, -4.7, -4.5, -4.0, -3.0, -2.2, -1.2, -0.3, +0.6, +1.9, +2.2, +1.4, +0.9, +1.2, +1.9, +2.0, +1.1, +0.9, +0.3, -0.4, -0.8, -0.5, -1.1, -3.1, -3.6, -3.3, -2.1, -2.1, -3.1, -3.7, -2.4, -1.8, -0.3, +1.3, +1.9, +1.7, +1.2, -0.2, -0.7, -2.0, -3.0, -3.4, -3.0, -2.8, -3.1, -3.0, -3.6, -4.4, -5.3, -5.9, -6.0, -5.4, -6.3, -7.0, -7.9, -8.0, -7.0, -4.0, -2.9, -1.4, -0.3, -0.3, -1.1, -1.1, -1.1, -1.6, -2.0, -1.7, -1.1, -1.6, -1.2, -0.3, -0.3, +0.3, -0.0, -0.3, -1.2, -2.8, -5.1, -6.4, -6.6, -6.2, -5.7, -6.1, -6.8, -6.7, -7.5, -8.4, -9.8, -10.0, -9.2, -7.7, -7.4, -8.2, -7.8, -7.3, -6.5, -6.6, -7.8, -7.8, -8.1, -7.6, -6.8, -5.9, -5.3, -5.6, -5.6, -5.9, -7.2, -7.7, -8.7, -8.7, -7.9, -7.8, -8.8, -10.2, -12.0, -12.1, -11.5, -10.7, -9.5, -8.7, -8.7, -8.4, -7.3, -6.8, -7.0, -7.8, -7.9, -7.5, -7.0, -8.1, -9.3, -10.3, -11.1, -10.7, -10.7, -11.7, -11.8, -11.2, -10.9, -11.1, -11.1, -10.6, -11.0, -10.7, -11.0, -11.0, -9.3, -9.2, -9.8, -9.2, -9.7, -10.4, -10.4, -9.6, -9.9, -10.0, -9.3, -8.9, -8.6, -7.9, -7.0, -7.3, -8.8, -9.3, -8.6, -6.9, -6.1, -6.3, -8.3, -10.2, -11.0, -11.2, -11.5, -12.4, -14.0, -14.4, -14.2, -13.8, -14.0, -13.1, -11.5, -10.3, -10.4, -12.3, -14.5, -17.1, -18.3, -18.0, -17.100]

    line_top = ax.plot(mw_xplot_top, mw_yplot_top, color=mw_color, alpha=mw_alpha)
    line_bot = ax.plot(mw_xplot_bot, mw_yplot_bot, color=mw_color, alpha=mw_alpha)

    return line_top, line_bot

def plot_ra_dec(ephem, title=None, base_dir=''):
    """Plot RA against Dec"""

    # Generate the figure **without using pyplot**.
    # https://matplotlib.org/faq/howto_faq.html#matplotlib-in-a-web-application-server
    fig = Figure(dpi=plot_dpi)
    ax = fig.subplots()

    # Look for RA wraparound at RA=360/0 deg and plot in two parts
    if ephem['RA'].max() >= 358.0:
        # Find index of max, min value
        wrap_index1 = np.argmin(ephem['RA'])
        wrap_index2 = np.argmax(ephem['RA'])
        if max(wrap_index1, wrap_index2) < len(ephem['RA']):
            if wrap_index1 > wrap_index2:
                # Max occurs before min so we are wrapping at 360 and RA is increasing
                wrap_index = wrap_index2
            elif  wrap_index1 < wrap_index2:
                # Min occurs before max so we are wrapping at 0 and RA is decreasing
                wrap_index = wrap_index1
            first_part = ephem[0:wrap_index+1]
            second_part = ephem[wrap_index+1:]
            lines = ax.plot(first_part['RA'], first_part['DEC'])
            line_color = lines[0].get_color()
            ax.plot(second_part['RA'], second_part['DEC'], color=line_color)
        else:
            ax.plot(ephem['RA'], ephem['DEC'])
    else:
        ax.plot(ephem['RA'], ephem['DEC'])
    ax.set_xlim(360.0, 0.0)
    ax.set_ylim(-95, 95)
    ax.set_xlabel('RA (deg)')
    ax.set_ylabel('Dec (deg)')
    # Set the Dec tick labels from -80 to +80 in steps of 20
    labels = np.arange(-80, 90, 20)
    ax.yaxis.set_ticks(labels)
    ax.minorticks_on()
    ax.xaxis.set_ticks_position('both')
    ax.yaxis.set_ticks_position('both')

    # Include Milky Way outline
    mw_top, mw_bot = plot_milkyway(ax, radec=True)

    first = ephem[0]
    first_date = datetime.strptime(first['datetime_str'], "%Y-%b-%d %H:%M")
    last = ephem[-1]
    last_date = datetime.strptime(last['datetime_str'], "%Y-%b-%d %H:%M")

    if title is None:
        title = "{} for {} to {}".format(first['targetname'], first_date.strftime("%Y-%m-%d"), last_date.strftime("%Y-%m-%d"))
    fig.suptitle(title)
    ax.set_title("Sky position")

    dec_offset = +10
    if first['DEC'] >= 75:
        dec_offset = -15
    ra_offset = 0
    if first['RA'] <= 40:
        ra_offset = +60
    ax.annotate(first_date.strftime("%Y-%m-%d"), xy=(first['RA'], first['DEC']), xytext=(first['RA'] + ra_offset, first['DEC'] + dec_offset),
                arrowprops=dict(facecolor='black', arrowstyle='->'))
    dec_offset = +10
    if last['DEC'] >= 75:
        dec_offset = -15
    ra_offset = 0
    if last['RA'] <= 40:
        ra_offset = +60
    ax.annotate(last_date.strftime("%Y-%m-%d"), xy=(last['RA'], last['DEC']), xytext=(last['RA'] + ra_offset, last['DEC'] + dec_offset),
                arrowprops=dict(arrowstyle='->'))

    # Add watermark
    add_watermark(fig)

    targetname = make_targetname(first['targetname'])
    save_file = "{}_radec_{}-{}.png".format(targetname, first_date.strftime("%Y%m%d"), last_date.strftime("%Y%m%d"))
    save_file = os.path.join(base_dir, save_file)
    fig_file = default_storage.open(save_file, "wb+")
    fig.savefig(fig_file, format='png')
    fig_file.close()

    return save_file


def plot_gal_long_lat(ephem, title=None, base_dir=''):
    """Plot Galactic longitude against latitude"""

    # Generate the figure **without using pyplot**.
    # https://matplotlib.org/faq/howto_faq.html#matplotlib-in-a-web-application-server
    fig = Figure(dpi=plot_dpi)
    ax = fig.subplots()

    # Look for longitude wraparound at l=360/0 deg and plot in two parts
    if ephem['GlxLon'].max() >= 358.0:
        # Find index of max, min value
        wrap_index1 = np.argmin(ephem['GlxLon'])
        wrap_index2 = np.argmax(ephem['GlxLon'])
        if max(wrap_index1, wrap_index2) < len(ephem['GlxLon']):
            if wrap_index1 > wrap_index2:
                # Max occurs before min so we are wrapping at 360 and GlxLon is increasing
                wrap_index = wrap_index2
            elif  wrap_index1 < wrap_index2:
                # Min occurs before max so we are wrapping at 0 and GlxLon is decreasing
                wrap_index = wrap_index1
            first_part = ephem[0:wrap_index+1]
            second_part = ephem[wrap_index+1:]
            lines = ax.plot(first_part['GlxLon'], first_part['GlxLat'])
            line_color = lines[0].get_color()
            ax.plot(second_part['GlxLon'], second_part['GlxLat'], color=line_color)
        else:
            ax.plot(ephem['GlxLon'], ephem['GlxLat'])
    else:
        ax.plot(ephem['GlxLon'], ephem['GlxLat'])
    ax.set_xlim(360.0, 0.0)
    ax.set_ylim(-95, 95)
    ax.set_xlabel('Galactic Longitude (deg)')
    ax.set_ylabel('Galactic Latitude (deg)')
    # Set the Galactic Latitude tick labels from -80 to +80 in steps of 20
    labels = np.arange(-80,90,20)
    ax.yaxis.set_ticks(labels)
    ax.minorticks_on()
    ax.xaxis.set_ticks_position('both')
    ax.yaxis.set_ticks_position('both')

    # Include Milky Way outline
    mw_top, mw_bot = plot_milkyway(ax, radec=False)

    first = ephem[0]
    first_date = datetime.strptime(first['datetime_str'], "%Y-%b-%d %H:%M")
    last = ephem[-1]
    last_date = datetime.strptime(last['datetime_str'], "%Y-%b-%d %H:%M")

    if title is None:
        title = "{} for {} to {}".format(first['targetname'], first_date.strftime("%Y-%m-%d"), last_date.strftime("%Y-%m-%d"))
    fig.suptitle(title)
    ax.set_title("Galactic position")

    dec_offset = +10
    if first['GlxLat'] >= 75:
        dec_offset = -15
    ra_offset = 0
    if first['GlxLon'] <= 40:
        ra_offset = +60
    ax.annotate(first_date.strftime("%Y-%m-%d"), xy=(first['GlxLon'], first['GlxLat']), xytext=(first['GlxLon']+ra_offset, first['GlxLat']+dec_offset),
            arrowprops=dict(facecolor='black', arrowstyle='->'))
    dec_offset = +10
    if last['GlxLat'] >= 75:
        dec_offset = -15
    ra_offset = 0
    if last['GlxLon'] <= 40:
        ra_offset = +60
    ax.annotate(last_date.strftime("%Y-%m-%d"), xy=(last['GlxLon'], last['GlxLat']), xytext=(last['GlxLon']+ra_offset, last['GlxLat']+dec_offset),
            arrowprops=dict(arrowstyle='->'))

    # Add watermark
    add_watermark(fig)

    targetname = make_targetname(first['targetname'])
    save_file = "{}_glonglat_{}-{}.png".format(targetname, first_date.strftime("%Y%m%d"), last_date.strftime("%Y%m%d"))
    save_file = os.path.join(base_dir, save_file)
    fig_file  = default_storage.open(save_file,"wb+")
    fig.savefig(fig_file, format='png')
    fig_file.close()

    return save_file


def plot_helio_geo_dist(ephem, title=None, base_dir=''):
    """Plot heliocentric distance (r) and geocentric distance (delta)
    against time
    """

    first = ephem[0]
    first_date = datetime.strptime(first['datetime_str'], "%Y-%b-%d %H:%M")
    last = ephem[-1]
    last_date = datetime.strptime(last['datetime_str'], "%Y-%b-%d %H:%M")

    hel_color = 'r'  # Red
    geo_color = "#0083ff"  # A nice pale blue
    peri_color = '#ff5900'  # Sort of orange
    ca_color = '#4700c3'

    # Generate the figure **without using pyplot**.
    fig = Figure(dpi=plot_dpi)
    ax = fig.subplots()
    dates = ephem['datetime'].datetime
    ax.plot(dates, ephem['r'], color=hel_color, linestyle='-')
    ax.plot(dates, ephem['delta'], color=geo_color, linestyle='-')

    perihelion = dates[ephem['r'].argmin()]
    close_approach = dates[ephem['delta'].argmin()]

    ylim = ax.get_ylim()
    ax.set_ylim(0, ylim[1]*1.05)
    ylim = ax.get_ylim()
    # Only plot if the perihelion and close approach aren't at the ends of the ephemeris
    if perihelion != dates[0] and perihelion != dates[-1]:
        ax.vlines(perihelion, ylim[0], ylim[1], colors=peri_color)
        ax.text(perihelion, 0.9*ylim[1], "perihelion", rotation=90, color=peri_color,
                horizontalalignment='right', verticalalignment='bottom', rotation_mode='anchor')
    if close_approach != dates[0] and close_approach != dates[-1]:
        ax.vlines(close_approach, ylim[0], ylim[1], colors=ca_color)
        ax.text(close_approach, 0.1*ylim[1], "C/A", rotation=90, color=ca_color, horizontalalignment='left')
    ax.set_xlabel('Date')
    ax.set_ylabel('Distance (AU)')
    fig.autofmt_xdate()
    ax.minorticks_on()
    ax.xaxis.set_ticks_position('both')
    ax.yaxis.set_ticks_position('both')

    ax.annotate('Heliocentric', xy=(dates[0], first['r']), color=hel_color)
    ax.annotate('Geocentric', xy=(dates[-1], last['delta']), color=geo_color, horizontalalignment='right')

    if title is None:
        title = "{} for {} to {}".format(first['targetname'], first_date.strftime("%Y-%m-%d"), last_date.strftime("%Y-%m-%d"))
    fig.suptitle(title)
    ax.set_title('Heliocentric & Geocentric distance')

    # Add watermark
    add_watermark(fig)

    targetname = make_targetname(first['targetname'])
    save_file = "{}_dist_{}-{}.png".format(targetname, first_date.strftime("%Y%m%d"), last_date.strftime("%Y%m%d"))
    save_file = os.path.join(base_dir, save_file)
    fig_file = default_storage.open(save_file, "wb+")
    fig.savefig(fig_file, format='png')
    fig_file.close()

    return save_file


def plot_brightness(ephem, title=None, base_dir=''):
    """Plot magnitude and elongation against time
    """

    first = ephem[0]
    first_date = datetime.strptime(first['datetime_str'], "%Y-%b-%d %H:%M")
    last = ephem[-1]
    last_date = datetime.strptime(last['datetime_str'], "%Y-%b-%d %H:%M")

    hel_color = 'r'  # Red
    geo_color = "#0083ff"  # A nice pale blue
    peri_color = '#ff5900'  # Sort of orange
    ca_color = '#4700c3'
    moon_color = '#504e42'  # sort of regolith from 'Moon Glow'... (https://www.colorcombos.com/colors/FEFCD7)
    mag_column = 'V'
    if 'Tmag' in ephem.colnames:
        # Switch to using comet Total magnitude
        mag_column = 'Tmag'

    # Generate the figure **without using pyplot**.
    fig = Figure(dpi=plot_dpi)
    ax = fig.subplots()
    ax2 = ax.twinx()

    dates = ephem['datetime'].datetime
    line_mag = ax.plot(dates, ephem[mag_column], color=hel_color, linestyle='-')
    line_elong = ax2.plot(dates, ephem['elong'], color=geo_color, linestyle='-')
    lines = [line_mag[0], line_elong[0]]
    labels = ['Magnitude', 'Elongation']
    rhs_ylabel = 'Elongation (degrees)'
    if 'moon_sep' in ephem.colnames:
        line_moon = ax2.plot(dates, ephem['moon_sep'], color=moon_color, linestyle=':')
        moon_curve = ephem['moon_sep'] + (ephem['moon_phase']*10.0)
        ax2.fill_between(dates, ephem['moon_sep'], moon_curve, color=moon_color)
        lines.append(line_moon[0])
        labels.append('Moon-Obj Sep')
        rhs_ylabel = 'Separation/' + rhs_ylabel
        xlower, xupper = ax.get_xlim()
        ax2.hlines(30, xlower, xupper, color=moon_color, linestyle='--')

    perihelion = dates[ephem['r'].argmin()]
    close_approach = dates[ephem['delta'].argmin()]

    ylim = ax.get_ylim()
    # Only plot if the perihelion and close approach aren't at the ends of the ephemeris
    if perihelion != dates[0] and perihelion != dates[-1]:
        ax.vlines(perihelion, ylim[0], ylim[1], colors=peri_color)
        ax.text(perihelion, 0.9*ylim[1], "perihelion", rotation=90, color=peri_color, horizontalalignment='right')
    if close_approach != dates[0] and close_approach != dates[-1]:
        ax.vlines(close_approach, ylim[0], ylim[1], colors=ca_color)
        ypos = ylim[1] - ((ylim[1] - ylim[0]) * 0.1)
        ax.text(close_approach, ypos, "C/A", rotation=90, color=ca_color, horizontalalignment='left')
    ax.set_ylim(ylim[1], ylim[0])
    ax.set_xlabel('Date')
    if mag_column == 'Tmag':
        ax.set_ylabel('Total magnitude', color=hel_color)
    else:
        ax.set_ylabel('V magnitude', color=hel_color)
    ax2.set_ylabel(rhs_ylabel, color=geo_color)

    fig.autofmt_xdate()
    ax.minorticks_on()
    # Turn off scale offset on magnitude axis
    ax.yaxis.get_major_formatter().set_useOffset(False)
    ax2.minorticks_on()
    ax.xaxis.set_ticks_position('both')
    ax.yaxis.set_ticks_position('left')
    ax2.yaxis.set_ticks_position('right')
    ax.tick_params(axis='x', which='both', direction='in', bottom=True, top=True)

    if title is None:
        title = "{} for {} to {}".format(first['targetname'], first_date.strftime("%Y-%m-%d"), last_date.strftime("%Y-%m-%d"))
    fig.suptitle(title)
    ax.set_title('Predicted brightness')
    ax.legend(lines, labels, loc='best', fontsize='x-small')
    # Add watermark
    add_watermark(fig)

    targetname = make_targetname(first['targetname'])
    save_file = "{}_mag_{}-{}.png".format(targetname, first_date.strftime("%Y%m%d"), last_date.strftime("%Y%m%d"))
    save_file = os.path.join(base_dir, save_file)
    fig_file = default_storage.open(save_file, "wb+")
    fig.savefig(fig_file, format='png')
    fig_file.close()

    return save_file


def determine_hours_up(ephem_ca, site_code, dbg=False):
    """Determine the number of hours of visibility during the night for a site
    (specified by <site_code>) by analyzing the <ephem_ca> produced by
    ephem_subs.horizons_ephem() with a more closely spaced ephemeris (e.g. 5m
    stepsize) over a shorter range.
    Returns a list of visible dates and hours up"""

    hours_visible = []
    visible_dates = []

    dates = ephem_ca['datetime']

    # Determine times of darkness for the site for the first night and use
    # the hour value of "sunset" as the boundary value of the night range
    dark_start, dark_end = determine_darkness_times(site_code, dates[0].datetime)
    dark_start = dark_start - timedelta(hours=2)
    dark_end = dark_end + timedelta(hours=2)
    start_date = dates[0].datetime.replace(hour=dark_start.hour, minute=0, second=0, microsecond=0)
    if start_date > dark_start:
        start_date = start_date - timedelta(days=1)
    end_date = dates[-1].datetime.replace(hour=dark_end.hour, minute=0, second=0, microsecond=0)
    if dates[-1] < end_date:
        if dbg:
            print("Subtracting 1 day from", end_date, dates[-1])
        end_date -= timedelta(days=1)
    if dbg:
        print(start_date, end_date)

    date = start_date
    while date < end_date:
        plot_date = date.date()
        if date.hour >= 15:
            plot_date = plot_date + timedelta(days=1)
        visible_dates.append(plot_date)
        end_dt = date + timedelta(days=1)
        visible_ephem = ephem_ca[(ephem_ca['datetime'] >= date) & (ephem_ca['datetime'] < end_dt)
                                 & (ephem_ca['solar_presence'] != 'C') & (ephem_ca['solar_presence'] != 'N')]
        hours_up = 0.0
        vis_times = ''
        if len(visible_ephem) > 0:
            time_up = visible_ephem[-1]['datetime'] - visible_ephem[0]['datetime']
            hours_up = time_up.datetime.total_seconds()/3600.0
            vis_times = " ({}->{})".format(visible_ephem[0]['datetime'], visible_ephem[-1]['datetime'])
        hours_visible.append(hours_up)
        if dbg:
            print("For {}: {}->{}: {:.2f} hours{}".format(plot_date, date.strftime("%Y-%m-%d %H:%M"), end_dt.strftime("%Y-%m-%d %H:%M"), hours_up, vis_times))
        date += timedelta(days=1)

    return visible_dates, hours_visible


def plot_hoursup(ephem_ca, site_code, title=None, add_altitude=False, add_rate=True, dbg=False, alt_limit=30, base_dir=''):
    """Calculate the number of hours an object is up at a site <site_code>
    from <ephem_ca> - a more closely spaced ephemeris (e.g. 5m) over a
    shorter range. If [add_rate]=True:
        Produces a 2 panel plot which plots the hours above 30 deg altitude and
         V magnitude in the bottom panel and the on-sky rate and optionally (if
         [add_altitude]=True) in the top panel.
    otherwise a single panel plot of the hours and V magnitude is produced
    The name of plot file is returned.
    """
    ca_color = '#4700c3'

    if ephem_ca is None or len(ephem_ca) < 2:
        logger.warning("Ephemeris is too short (no visibility?)")
        return ''

    first = ephem_ca[0]
    dates = ephem_ca['datetime'].datetime
    close_approach = dates[ephem_ca['delta'].argmin()]
    visible_dates, hours_visible = determine_hours_up(ephem_ca, site_code, dbg)
    mag_column = 'V'
    if 'Tmag' in ephem_ca.colnames:
        # Switch to using comet Total magnitude
        mag_column = 'Tmag'

    # Generate the figure **without using pyplot**.
    if add_rate:
#        fig = Figure(figsize=(10,8))
        fig = Figure(dpi=plot_dpi)
        axes = fig.subplots(2, 1, sharex=True)
    else:
        fig = Figure(dpi=plot_dpi)
        axes = fig.subplots(1, 1)
        ax = axes
    fig.subplots_adjust(hspace=0.1)
    # Do bottom plot
    if add_rate:
        ax = axes[1]
    ax2 = ax.twinx()
    line_hours = ax.plot(visible_dates, hours_visible, 'k-')
    line_vmag = ax2.plot(dates, ephem_ca[mag_column], color= '#ff5900', linestyle='-.')
    y2lim = ax2.get_ylim()
    ax2.set_ylim(y2lim[1], y2lim[0])
    ylim = ax.get_ylim()
    if close_approach != dates[0] and close_approach != dates[-1]:
        ax.axvline(close_approach, color=ca_color)
        ax.text(close_approach, 0.1*ylim[1], "C/A", rotation=90, color=ca_color, horizontalalignment='left')

    if add_rate:
        # Do top plot
        ax = axes[0]
        line_rate = ax.plot(dates, ephem_ca['mean_rate'], color='b', linestyle='-')
        if add_altitude is True:
            upper_ax2 = ax.twinx()
            line_alt = upper_ax2.plot(dates, ephem_ca['EL'], color='g', linestyle=':')
            ylim = upper_ax2.get_ylim()
            upper_ax2.set_ylim(ylim[0], 90)
        if close_approach != dates[0] and close_approach != dates[-1]:
            ax.axvline(close_approach, color=ca_color)

        if add_altitude is False:
            ax.yaxis.set_ticks_position('both')
        else:
            ax.yaxis.set_ticks_position('left')
            upper_ax2.yaxis.set_ticks_position('right')
            upper_ax2.minorticks_on()
            upper_ax2.set_ylabel("Altitude")
        ax.set_ylabel('Rate ("/min)')
        ax.minorticks_on()

    ax.set_title('Visibility at ' + site_code)
    if title is None:
        title = "{} for {} to {}".format(first['targetname'], dates[0].strftime("%Y-%m-%d"), dates[-1].strftime("%Y-%m-%d"))
    fig.suptitle(title)
#    ax.legend(handles=(line_rate[0],), labels=('Rate',), loc='best', fontsize='x-small')

    # Back to bottom plot to set date labels
    if add_rate:
        ax = axes[1]
    ylim = ax.get_ylim()
    ax.set_ylim(0, ylim[1]*1.05)
    ax.set_xlabel("Date")
    fig.autofmt_xdate()

    y_units_label = 'Hours above $' + str(alt_limit) + '^\circ$ altitude'
    ax.set_ylabel(y_units_label)
    if mag_column == 'Tmag':
        mag_label = 'Total magnitude'
    else:
        mag_label = 'V magnitude'
    ax2.set_ylabel(mag_label)
    ax.legend(handles=(line_hours[0], line_vmag[0]), labels=('Hours up', mag_label), loc='best', fontsize='x-small')

    ax.minorticks_on()
    ax2.minorticks_on()
    ax.xaxis.set_ticks_position('both')
    ax.yaxis.set_ticks_position('left')
    # Ensure V magnitude on RHS only has 1 d.p of precision to prevent label going off right
    ax2.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
    ax2.yaxis.set_ticks_position('right')

    # Add watermark
    add_watermark(fig)

    targetname = make_targetname(first['targetname'])
    save_file = "{}_hoursup_{}_{}-{}.png".format(targetname, site_code, dates[0].strftime("%Y%m%d"), dates[-1].strftime("%Y%m%d"))
    save_file = os.path.join(base_dir, save_file)
    fig_file  = default_storage.open(save_file,"wb+")
    fig.savefig(fig_file, format='png')
    fig_file.close()

    return save_file


def plot_uncertainty(ephem, title=None, base_dir=''):
    """Plot uncertainty against time"""

    ca_color = '#4700c3'

    first = ephem[0]
    dates = ephem['datetime'].datetime

    ca_idx = ephem['delta'].argmin()
    close_approach = None
    if 0 < ca_idx < len(ephem)-1:
        close_approach = dates[ca_idx]

    # Generate the figure **without using pyplot**.
    fig = Figure(dpi=plot_dpi)
    ax = fig.subplots()

    unc_line = ax.plot(dates, ephem['RSS_3sigma'], 'k-')
    unc_line = unc_line[0]
    ylim = ax.get_ylim()
    ax.set_ylim(0, ylim[1]*1.05)
    if close_approach:
        ax.axvline(close_approach, color=ca_color)
        ax.text(close_approach, 0.1*ylim[1], "C/A", rotation=90, color=ca_color, horizontalalignment='left')

    ax.set_xlabel("Date")
    ax.set_ylabel('Uncertainty (")')
    fig.autofmt_xdate()
    ax.minorticks_on()
    ax.yaxis.set_ticks_position('both')
    ax.tick_params(axis='x', which='both', direction='in', bottom=True, top=True)

    ephem_step = dates[1] - dates[0]
    ephem_step = ephem_step.total_seconds()
    ephem_step = min(ephem_step, 86400)
    ephem_step_size = int(86400.0 / ephem_step)
    # Make ticks along the line every 10 days
    tick_steps = 5 * ephem_step_size
    tick_labels = [datetime.strftime(dates[d_idx].date(), "%Y-%m-%d") for d_idx in range(0, len(dates), tick_steps)]

    tick_direction = 1
    if ephem['RSS_3sigma'].mean() > ylim[1]/2.0:
        tick_direction = -1
    line_ticks = LineTicks(unc_line, range(0, len(dates), tick_steps), 10, label=tick_labels, lw=1.5, direction=tick_direction, color='r')

    if title is None:
        title = "{} for {} to {}".format(first['targetname'], dates[0].strftime("%Y-%m-%d"), dates[-1].strftime("%Y-%m-%d"))
    fig.suptitle(title)
    ax.set_title('$3\sigma$ Plane-of-Sky Uncertainty')

    # Add watermark
    add_watermark(fig)

    targetname = make_targetname(first['targetname'])
    save_file = "{}_uncertainty_{}-{}.png".format(targetname, dates[0].strftime("%Y%m%d"), dates[-1].strftime("%Y%m%d"))
    save_file = os.path.join(base_dir, save_file)
    fig_file  = default_storage.open(save_file,"wb+")
    fig.savefig(fig_file, format='png')
    fig_file.close()

    return save_file
