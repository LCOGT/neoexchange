from os import path, walk, remove
from sys import argv
import glob
from astropy.table import Table
import multi_aper_phot_astrom

# Program to combine the target photometry/astrometry tables from multiple
# different datasets into a single set of data products.
# Expects data taken in a consisent filter, and a file structure as follows:
# dataroot
#    |_ subdir1 (single obs block)
#         |_target FITS table data
#    |_ subdir2 (single obs block)
#         |_target FITS table data
#   etc...

def run(config):

    # Check no previous concatenated data products exist.  If they do,
    # they need to be removed before the directory walk to avoid repeated
    # concatenation:
    remove_previous_data_products(config)

    # Walk the dataroot tree and identify the set of input target data tables:
    data_list = list_datasets(config)

    # Loop over all of the tables in the data list, and concatenate the results
    for i,filepath in enumerate(data_list):
        t = Table.read(filepath, format='fits')
        if i == 0:
            data_table = t
        else:
            for row in range(0,len(t),1):
                data_table.add_row(t[row])

    # Output the concatenated data table:
    multi_aper_phot_astrom.output_target_data_table(config, data_table)

    # Output long baseline plots:
    multi_aper_phot_astrom.plot_multi_aperture_lightcurve(config, data_table)
    multi_aper_phot_astrom.plot_target_radius(config, data_table)

def remove_previous_data_products(config):
    """Function to remove any previous data tables generated by this program.
    This is to avoid the walker including them in the input data products,
    leading to constantly extending data..."""

    descriptor = {'filter': [config['bandpass']]}
    filepath = multi_aper_phot_astrom.set_output_file_path(config, descriptor)

    if path.isfile(filepath):
        print('WARNING: REMOVING PRIOR CONCATENATED DATA FILE '+filepath)
        opt = input('OK?  Y or any other key to abort: ')
        if opt == 'Y':
            remove(filepath)
        else:
            exit()

def list_datasets(params):
    """Function to walk the directory tree and identify all of the input
    target data tables"""

    data_list = []

    for root, dirs, files in walk(params['dataroot']):
        for filename in files:
            filepath = path.join(root, filename)
            if '_data_'+params['bandpass']+'.fits' in filename:
                data_list.append(filepath)

    if len(data_list) == 0:
        raise IOError('No '+params['bandpass']+' data found in directory '+params['dataroot'])

    return data_list

def get_args():
    config = {}
    if len(argv) == 1:
        config['dataroot'] = input('Please enter the top-level directory with multiple datasets: ')
        config['bandpass'] = input('Please give the code for the filter used: ')
        config['target_name'] = input('Please enter the name of the target: ')
    else:
        config['dataroot'] = argv[1]
        config['bandpass'] = argv[2]
        config['target_name'] = argv[3]
    return config

if __name__ == '__main__':
    config = get_args()
    run(config)
